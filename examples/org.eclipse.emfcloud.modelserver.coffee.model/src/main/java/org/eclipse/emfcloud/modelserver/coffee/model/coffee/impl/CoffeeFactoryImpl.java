/**
 * generated by Xtext 2.19.0
 */
package org.eclipse.emfcloud.modelserver.coffee.model.coffee.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.eclipse.emfcloud.modelserver.coffee.model.coffee.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CoffeeFactoryImpl extends EFactoryImpl implements CoffeeFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CoffeeFactory init()
  {
    try
    {
      CoffeeFactory theCoffeeFactory = (CoffeeFactory)EPackage.Registry.INSTANCE.getEFactory(CoffeePackage.eNS_URI);
      if (theCoffeeFactory != null)
      {
        return theCoffeeFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CoffeeFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CoffeeFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CoffeePackage.MACHINE: return createMachine();
      case CoffeePackage.COMPONENT: return createComponent();
      case CoffeePackage.NODE: return createNode();
      case CoffeePackage.FLOW: return createFlow();
      case CoffeePackage.WORKFLOW: return createWorkflow();
      case CoffeePackage.CONTROL_UNIT: return createControlUnit();
      case CoffeePackage.BREWING_UNIT: return createBrewingUnit();
      case CoffeePackage.DIP_TRAY: return createDipTray();
      case CoffeePackage.WATER_TANK: return createWaterTank();
      case CoffeePackage.ACTOR: return createActor();
      case CoffeePackage.PROCESSOR: return createProcessor();
      case CoffeePackage.DIMENSION: return createDimension();
      case CoffeePackage.RAM: return createRAM();
      case CoffeePackage.DISPLAY: return createDisplay();
      case CoffeePackage.AUTOMATIC_TASK: return createAutomaticTask();
      case CoffeePackage.MANUAL_TASK: return createManualTask();
      case CoffeePackage.FORK: return createFork();
      case CoffeePackage.JOIN: return createJoin();
      case CoffeePackage.DECISION: return createDecision();
      case CoffeePackage.MERGE: return createMerge();
      case CoffeePackage.WEIGHTED_FLOW: return createWeightedFlow();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CoffeePackage.SOCKET_CONNECTOR_TYPE:
        return createSocketConnectorTypeFromString(eDataType, initialValue);
      case CoffeePackage.MANUFACTORING_PROCESS:
        return createManufactoringProcessFromString(eDataType, initialValue);
      case CoffeePackage.RAM_TYPE:
        return createRamTypeFromString(eDataType, initialValue);
      case CoffeePackage.PROBABILITY:
        return createProbabilityFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CoffeePackage.SOCKET_CONNECTOR_TYPE:
        return convertSocketConnectorTypeToString(eDataType, instanceValue);
      case CoffeePackage.MANUFACTORING_PROCESS:
        return convertManufactoringProcessToString(eDataType, instanceValue);
      case CoffeePackage.RAM_TYPE:
        return convertRamTypeToString(eDataType, instanceValue);
      case CoffeePackage.PROBABILITY:
        return convertProbabilityToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Machine createMachine()
  {
    MachineImpl machine = new MachineImpl();
    return machine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Node createNode()
  {
    NodeImpl node = new NodeImpl();
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Flow createFlow()
  {
    FlowImpl flow = new FlowImpl();
    return flow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Workflow createWorkflow()
  {
    WorkflowImpl workflow = new WorkflowImpl();
    return workflow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ControlUnit createControlUnit()
  {
    ControlUnitImpl controlUnit = new ControlUnitImpl();
    return controlUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BrewingUnit createBrewingUnit()
  {
    BrewingUnitImpl brewingUnit = new BrewingUnitImpl();
    return brewingUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DipTray createDipTray()
  {
    DipTrayImpl dipTray = new DipTrayImpl();
    return dipTray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WaterTank createWaterTank()
  {
    WaterTankImpl waterTank = new WaterTankImpl();
    return waterTank;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Actor createActor()
  {
    ActorImpl actor = new ActorImpl();
    return actor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Processor createProcessor()
  {
    ProcessorImpl processor = new ProcessorImpl();
    return processor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dimension createDimension()
  {
    DimensionImpl dimension = new DimensionImpl();
    return dimension;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RAM createRAM()
  {
    RAMImpl ram = new RAMImpl();
    return ram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Display createDisplay()
  {
    DisplayImpl display = new DisplayImpl();
    return display;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AutomaticTask createAutomaticTask()
  {
    AutomaticTaskImpl automaticTask = new AutomaticTaskImpl();
    return automaticTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ManualTask createManualTask()
  {
    ManualTaskImpl manualTask = new ManualTaskImpl();
    return manualTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fork createFork()
  {
    ForkImpl fork = new ForkImpl();
    return fork;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Join createJoin()
  {
    JoinImpl join = new JoinImpl();
    return join;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Decision createDecision()
  {
    DecisionImpl decision = new DecisionImpl();
    return decision;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Merge createMerge()
  {
    MergeImpl merge = new MergeImpl();
    return merge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WeightedFlow createWeightedFlow()
  {
    WeightedFlowImpl weightedFlow = new WeightedFlowImpl();
    return weightedFlow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SocketConnectorType createSocketConnectorTypeFromString(EDataType eDataType, String initialValue)
  {
    SocketConnectorType result = SocketConnectorType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSocketConnectorTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ManufactoringProcess createManufactoringProcessFromString(EDataType eDataType, String initialValue)
  {
    ManufactoringProcess result = ManufactoringProcess.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertManufactoringProcessToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RamType createRamTypeFromString(EDataType eDataType, String initialValue)
  {
    RamType result = RamType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRamTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Probability createProbabilityFromString(EDataType eDataType, String initialValue)
  {
    Probability result = Probability.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertProbabilityToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CoffeePackage getCoffeePackage()
  {
    return (CoffeePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CoffeePackage getPackage()
  {
    return CoffeePackage.eINSTANCE;
  }

} //CoffeeFactoryImpl
