/**
 * generated by Xtext 2.19.0
 */
package org.eclipse.emfcloud.modelserver.coffee.model.coffee.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emfcloud.modelserver.coffee.model.coffee.CoffeePackage;
import org.eclipse.emfcloud.modelserver.coffee.model.coffee.RAM;
import org.eclipse.emfcloud.modelserver.coffee.model.coffee.RamType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>RAM</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.emfcloud.modelserver.coffee.model.coffee.impl.RAMImpl#getClockSpeed <em>Clock Speed</em>}</li>
 *   <li>{@link org.eclipse.emfcloud.modelserver.coffee.model.coffee.impl.RAMImpl#getSize <em>Size</em>}</li>
 *   <li>{@link org.eclipse.emfcloud.modelserver.coffee.model.coffee.impl.RAMImpl#getType <em>Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RAMImpl extends MinimalEObjectImpl.Container implements RAM
{
  /**
   * The default value of the '{@link #getClockSpeed() <em>Clock Speed</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClockSpeed()
   * @generated
   * @ordered
   */
  protected static final String CLOCK_SPEED_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getClockSpeed() <em>Clock Speed</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClockSpeed()
   * @generated
   * @ordered
   */
  protected String clockSpeed = CLOCK_SPEED_EDEFAULT;

  /**
   * The default value of the '{@link #getSize() <em>Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize()
   * @generated
   * @ordered
   */
  protected static final String SIZE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSize() <em>Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize()
   * @generated
   * @ordered
   */
  protected String size = SIZE_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final RamType TYPE_EDEFAULT = RamType.SODIMM;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected RamType type = TYPE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RAMImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CoffeePackage.Literals.RAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getClockSpeed()
  {
    return clockSpeed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setClockSpeed(String newClockSpeed)
  {
    String oldClockSpeed = clockSpeed;
    clockSpeed = newClockSpeed;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CoffeePackage.RAM__CLOCK_SPEED, oldClockSpeed, clockSpeed));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSize()
  {
    return size;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSize(String newSize)
  {
    String oldSize = size;
    size = newSize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CoffeePackage.RAM__SIZE, oldSize, size));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RamType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(RamType newType)
  {
    RamType oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CoffeePackage.RAM__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CoffeePackage.RAM__CLOCK_SPEED:
        return getClockSpeed();
      case CoffeePackage.RAM__SIZE:
        return getSize();
      case CoffeePackage.RAM__TYPE:
        return getType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CoffeePackage.RAM__CLOCK_SPEED:
        setClockSpeed((String)newValue);
        return;
      case CoffeePackage.RAM__SIZE:
        setSize((String)newValue);
        return;
      case CoffeePackage.RAM__TYPE:
        setType((RamType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CoffeePackage.RAM__CLOCK_SPEED:
        setClockSpeed(CLOCK_SPEED_EDEFAULT);
        return;
      case CoffeePackage.RAM__SIZE:
        setSize(SIZE_EDEFAULT);
        return;
      case CoffeePackage.RAM__TYPE:
        setType(TYPE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CoffeePackage.RAM__CLOCK_SPEED:
        return CLOCK_SPEED_EDEFAULT == null ? clockSpeed != null : !CLOCK_SPEED_EDEFAULT.equals(clockSpeed);
      case CoffeePackage.RAM__SIZE:
        return SIZE_EDEFAULT == null ? size != null : !SIZE_EDEFAULT.equals(size);
      case CoffeePackage.RAM__TYPE:
        return type != TYPE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (clockSpeed: ");
    result.append(clockSpeed);
    result.append(", size: ");
    result.append(size);
    result.append(", type: ");
    result.append(type);
    result.append(')');
    return result.toString();
  }

} //RAMImpl
